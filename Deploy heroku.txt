postgresql em produção
======================
1) Instalar pacote nuget Npgsql.EntityFrameworkCore.PostgreSQL  ***** versão 2.1.0
2) Alterar as classes Entity que possuem primary-key auto-incrementados.
	As primary-keys com auto-incremento devem possuir o atributo como no exemplo abaixo
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int UsuarioId { get; set; }

3) Alterar as migrations que possuem a instrução "SqlServerValueGenerationStrategy.IdentityColumn" como no exemplo abaixo.
            migrationBuilder.CreateTable(
                name: "Mesas",
                columns: table => new
                {
                    MesaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),

	Sempre que tiver isso, acrescentar a instrução:
                        .Annotation("Npgsql:ValueGenerationStrategy",NpgsqlValueGenerationStrategy.IdentityAlwaysColumn),

	Vai ficar assim (observe que foi removida uma vírgula):
            migrationBuilder.CreateTable(
                name: "Mesas",
                columns: table => new
                {
                    MesaId = table.Column<int>(nullable: false)
                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn)
                        .Annotation("Npgsql:ValueGenerationStrategy",NpgsqlValueGenerationStrategy.IdentityAlwaysColumn),


4) Alterar o Startup.cs para carregar os drivers do PostgreSQL quando o ambiente não for de desenvolvimento.
	A) Obter o componente "" no construtor e armazenar
	    public Startup(IHostingEnvironment env, IConfiguration configuration)
        {
            Configuration = configuration;
            CurrentEnvironment = env;
        }

        public IConfiguration Configuration { get; }
        private IHostingEnvironment CurrentEnvironment{ get; set; } 

	B) No ConfigureServices(), incluir o driver do SQLServer se for ambiente de desenvolvimento, caso contrário incluir o driver do PostgreSQL.
		if (CurrentEnvironment.IsDevelopment()) {
			services.AddDbContext<WebApplication4Context>(options =>
					options.UseSqlServer(Configuration.GetConnectionString("WebApplication4Context")));
		}
		else
		{
			// staging e production
			services.AddDbContext<WebApplication4Context>(options =>
					options.UseNpgsql(Configuration.GetConnectionString("WebApplication4Context")));
		}

5) Como não podemos instalar o cliente PGSQL nos computadores da faculdade....
	No final do arquivo "<projeto>.csproj" tem uma linha
		</Project>
	Acrescentar imediatamente antes dessa linha o seguinte texto:
		<Target Name="PrePublishTarget" AfterTargets="Publish">
		  <Exec Command="dotnet ef database update" />
		</Target>

	Isto fará com que as migrações sejam executadas ao iniciar a aplicação


heroku
======
1) Instalação
	GIT CLI - https://git-scm.com/download/win
	Heroky CLI - https://devcenter.heroku.com/articles/heroku-cli#download-and-install

2) Criar conta no Heroku
	http://heroku.com

3) Incluir o PostgreSQL na sua conta Heroku (versão hobby-dev que limita a quantidade de registros)
	Abrir CMD
		heroku addons:create heroku-postgresql:hobby-dev -a <app>
		heroku addons:create heroku-postgresql:hobby-dev -a <app>-staging
	Ver dados do acesso ao PostgreSQL
		heroku config -a <app>
		heroku config -a <app>-staging

	Baixar pgadmin portable, instalar e executar (https://sourceforge.net/projects/pgadminportable/)
		Clicar no botão add a connection
		heroku pg:psql -a <app> DATABASE < postgresql-2018-11-27.sql
		
3) Logar no heroku com o CLI
	Abrir CMD
		heroku login
4) Criar aplicação no Heroku e sua contrapart staging
	execute no cmd
		heroku create <app>
		heroku create <app>-staging
5) Instalar o build-pack para ASPNET CORE
	execute no cmd
		heroku buildpacks:set jincod/dotnetcore -a <app>
		heroku buildpacks:set jincod/dotnetcore -a <app>-staging
6) Configurar o ambiente do Heroku para indicar que é produção
	execute no cmd
		heroku config:set ASPNETCORE_ENVIRONMENT=Production -a <app>
		heroku config:set ASPNETCORE_ENVIRONMENT=Staging -a <app>-staging
7)
Criar um pipeline
	- execute no cmd
		heroku pipelines:create -a <app>
		para a pergunta "? Pipeline name" digite o nome da sua aplicação (<app>) ou aceite o padrão. Vamos chamar este nome de <pipeline> neste documento.
		para a pergunta "? Stage of upchess (Use arrow keys)" aceite o padrão (production) teclando enter
		A segunda pergunta pede qual é o estágio da aplicação que está sendo configurada (produção).
	- Precisamos agora incluir a aplicação de staging.
		execute no cmd substituindo <pipeline> pelo nome do pipeline e <app> pelo nome da aplicação.
		heroku pipelines:add <pipeline> -a <app>-staging
		para a pergunta "? Stage of upchess-staging (Use arrow keys)" selecione  (staging).

Conectar o pipeline com o github
	execute no cmd
		heroku pipelines:connect <pipeline> -r <repo>
	exemplo:
		se a URL do repositório é https://github.com/aluno/webproject então o comando é
		heroku pipelines:connect <pipeline> -r aluno/webproject
	
Fazer um deploy manual
	Entre na página do Heroku e selecione seu pipeline
	No grupo Staging, abra o menu (botão no canto superior esquerdo do grupo) e selecione "Deploy a branch".
	Selecione "Master" e clique no botão "Deploy"
	Aguarde a compilação/build e clique em "View Log", no final do log deve existir mensagens como:
								https://upchess-staging.herokuapp.com/ deployed to Heroku
								build finished


		


